// Generated by gencpp from file color_shape_pair_pkg/eventRequest.msg
// DO NOT EDIT!


#ifndef COLOR_SHAPE_PAIR_PKG_MESSAGE_EVENTREQUEST_H
#define COLOR_SHAPE_PAIR_PKG_MESSAGE_EVENTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace color_shape_pair_pkg
{
template <class ContainerAllocator>
struct eventRequest_
{
  typedef eventRequest_<ContainerAllocator> Type;

  eventRequest_()
    : b(0)
    , g(0)
    , r(0)
    , shape(0)  {
    }
  eventRequest_(const ContainerAllocator& _alloc)
    : b(0)
    , g(0)
    , r(0)
    , shape(0)  {
  (void)_alloc;
    }



   typedef int64_t _b_type;
  _b_type b;

   typedef int64_t _g_type;
  _g_type g;

   typedef int64_t _r_type;
  _r_type r;

   typedef int64_t _shape_type;
  _shape_type shape;





  typedef boost::shared_ptr< ::color_shape_pair_pkg::eventRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::color_shape_pair_pkg::eventRequest_<ContainerAllocator> const> ConstPtr;

}; // struct eventRequest_

typedef ::color_shape_pair_pkg::eventRequest_<std::allocator<void> > eventRequest;

typedef boost::shared_ptr< ::color_shape_pair_pkg::eventRequest > eventRequestPtr;
typedef boost::shared_ptr< ::color_shape_pair_pkg::eventRequest const> eventRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::color_shape_pair_pkg::eventRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::color_shape_pair_pkg::eventRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::color_shape_pair_pkg::eventRequest_<ContainerAllocator1> & lhs, const ::color_shape_pair_pkg::eventRequest_<ContainerAllocator2> & rhs)
{
  return lhs.b == rhs.b &&
    lhs.g == rhs.g &&
    lhs.r == rhs.r &&
    lhs.shape == rhs.shape;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::color_shape_pair_pkg::eventRequest_<ContainerAllocator1> & lhs, const ::color_shape_pair_pkg::eventRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace color_shape_pair_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::color_shape_pair_pkg::eventRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::color_shape_pair_pkg::eventRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::color_shape_pair_pkg::eventRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::color_shape_pair_pkg::eventRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::color_shape_pair_pkg::eventRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::color_shape_pair_pkg::eventRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::color_shape_pair_pkg::eventRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c790a1e3de39f277ec70a3ca47c36ae";
  }

  static const char* value(const ::color_shape_pair_pkg::eventRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c790a1e3de39f27ULL;
  static const uint64_t static_value2 = 0x7ec70a3ca47c36aeULL;
};

template<class ContainerAllocator>
struct DataType< ::color_shape_pair_pkg::eventRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "color_shape_pair_pkg/eventRequest";
  }

  static const char* value(const ::color_shape_pair_pkg::eventRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::color_shape_pair_pkg::eventRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 b\n"
"int64 g\n"
"int64 r\n"
"int64 shape\n"
;
  }

  static const char* value(const ::color_shape_pair_pkg::eventRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::color_shape_pair_pkg::eventRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.b);
      stream.next(m.g);
      stream.next(m.r);
      stream.next(m.shape);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct eventRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::color_shape_pair_pkg::eventRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::color_shape_pair_pkg::eventRequest_<ContainerAllocator>& v)
  {
    s << indent << "b: ";
    Printer<int64_t>::stream(s, indent + "  ", v.b);
    s << indent << "g: ";
    Printer<int64_t>::stream(s, indent + "  ", v.g);
    s << indent << "r: ";
    Printer<int64_t>::stream(s, indent + "  ", v.r);
    s << indent << "shape: ";
    Printer<int64_t>::stream(s, indent + "  ", v.shape);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COLOR_SHAPE_PAIR_PKG_MESSAGE_EVENTREQUEST_H
