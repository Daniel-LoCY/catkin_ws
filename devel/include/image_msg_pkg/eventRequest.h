// Generated by gencpp from file image_msg_pkg/eventRequest.msg
// DO NOT EDIT!


#ifndef IMAGE_MSG_PKG_MESSAGE_EVENTREQUEST_H
#define IMAGE_MSG_PKG_MESSAGE_EVENTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace image_msg_pkg
{
template <class ContainerAllocator>
struct eventRequest_
{
  typedef eventRequest_<ContainerAllocator> Type;

  eventRequest_()
    : a(0)  {
    }
  eventRequest_(const ContainerAllocator& _alloc)
    : a(0)  {
  (void)_alloc;
    }



   typedef int64_t _a_type;
  _a_type a;





  typedef boost::shared_ptr< ::image_msg_pkg::eventRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::image_msg_pkg::eventRequest_<ContainerAllocator> const> ConstPtr;

}; // struct eventRequest_

typedef ::image_msg_pkg::eventRequest_<std::allocator<void> > eventRequest;

typedef boost::shared_ptr< ::image_msg_pkg::eventRequest > eventRequestPtr;
typedef boost::shared_ptr< ::image_msg_pkg::eventRequest const> eventRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::image_msg_pkg::eventRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::image_msg_pkg::eventRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::image_msg_pkg::eventRequest_<ContainerAllocator1> & lhs, const ::image_msg_pkg::eventRequest_<ContainerAllocator2> & rhs)
{
  return lhs.a == rhs.a;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::image_msg_pkg::eventRequest_<ContainerAllocator1> & lhs, const ::image_msg_pkg::eventRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace image_msg_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::image_msg_pkg::eventRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::image_msg_pkg::eventRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::image_msg_pkg::eventRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::image_msg_pkg::eventRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_msg_pkg::eventRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_msg_pkg::eventRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::image_msg_pkg::eventRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "019706110004b728d56d8baaa8e32797";
  }

  static const char* value(const ::image_msg_pkg::eventRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x019706110004b728ULL;
  static const uint64_t static_value2 = 0xd56d8baaa8e32797ULL;
};

template<class ContainerAllocator>
struct DataType< ::image_msg_pkg::eventRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "image_msg_pkg/eventRequest";
  }

  static const char* value(const ::image_msg_pkg::eventRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::image_msg_pkg::eventRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 a\n"
;
  }

  static const char* value(const ::image_msg_pkg::eventRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::image_msg_pkg::eventRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.a);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct eventRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::image_msg_pkg::eventRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::image_msg_pkg::eventRequest_<ContainerAllocator>& v)
  {
    s << indent << "a: ";
    Printer<int64_t>::stream(s, indent + "  ", v.a);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMAGE_MSG_PKG_MESSAGE_EVENTREQUEST_H
